@page "/"
@using UI.Services.Interfaces

<AuthorizeView>
    <Authorized>
        @if(true) { isAuthenticated = true; isBusy = true; }
    </Authorized>
    <NotAuthorized>
        @if(true) { isAuthenticated = false; isBusy = false; }
    </NotAuthorized>
</AuthorizeView>

<section id="glowny">
@if (!isBusy)
    {       
            <div class="start">
                <h1>Stwórzmy razem Twój plan zajęć</h1>
                 <div class="przyciski">
                <a href="/login" class="start btn btn-light">LOGOWANIE</a>
                <a href="/register" class="start btn btn-border">REJESTRACJA</a>
            </div>
        </div>   
        <div class="zdjecia">
           <img src="./image/3573383.svg" alt="">
        </div> 
    }
    else
    {
        <div style="margin: auto;" class="lds-dual-ring"></div>
    }
</section>

@code {
    private bool isBusy = true;
    private bool isAuthenticated;

    [Inject]
    public ITimetableStateHttpService TimetableStateHttpService{ get; set; }

    [Inject]
    public NavigationManager NavigationManager{ get; set; }

    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(10);
        if (isAuthenticated)
        {
        isBusy = true;
        int currentTimetable = await TimetableStateHttpService.GetCurrentTimetable();
        int currentPhase = await TimetableStateHttpService.GetCurrentPhase(currentTimetable);
        isBusy = false;
            switch (currentPhase)
            {
                case 1:
                    NavigationManager.NavigateTo("home");
                    break;
                case 2:
                    NavigationManager.NavigateTo("addsubjects");
                    break;
            }
        }    
    }
}



